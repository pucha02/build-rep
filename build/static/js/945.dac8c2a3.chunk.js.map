{"version":3,"file":"static/js/945.dac8c2a3.chunk.js","mappings":"kKAIA,MAgPA,EAhPwBA,IAA6D,IAA5D,SAAEC,EAAQ,YAAEC,EAAW,YAAEC,EAAW,eAAEC,GAAgBJ,EAC3E,MAAOK,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,KAC9BK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAC5BO,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAS,OAChDS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,KAE3CW,EAAAA,EAAAA,YAAU,KACFf,IACAG,EAAQH,EAAYE,MACpBM,EAAUR,EAAYK,OAC1B,GACD,CAACL,IAGJ,MA8GMgB,EAAYA,KACdb,EAAQ,IACRK,EAAU,IACVM,EAAa,IACbR,EAAS,IACTL,EAAe,KAAK,EAGxB,OACIgB,EAAAA,EAAAA,MAAA,QAAMC,SArCWC,UACjBC,EAAEC,iBAEF,MAAMC,EAAWtB,EACX,kDAAkDF,KAAYE,EAAYuB,KAC1E,gDAEAC,EAAU,CACZD,GAAIzB,EACJI,OACAK,UAGJ,UACUkB,EAAAA,EAAMC,IAAIJ,EAAUE,EAAS,CAC/BG,QAAS,CACL,eAAgB,sBAIxB5B,IACAiB,GACJ,CAAE,MAAOY,GACLC,QAAQD,MAAM,yBAA0BA,EAC5C,GAa8BE,UAAU,gBAAeC,SAAA,EACnDC,EAAAA,EAAAA,KAAA,MAAAD,SAAK/B,EAAc,wFAAoB,mEACvCgC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACxBC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOhC,EACPiC,SAAWf,GAAMjB,EAAQiB,EAAEgB,OAAOF,OAClCG,YAAY,sEACZP,UAAU,mBAGlBb,EAAAA,EAAAA,MAAA,OAAKa,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAO7B,EACP8B,SAAWf,GAAMd,EAASc,EAAEgB,OAAOF,OACnCG,YAAY,sEACZP,UAAU,iBAEdE,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASK,QA1IjBC,KACb,MAAMC,EAAW,CACbjB,GAAIkB,KAAKC,MACTC,UAAWtC,EACXuC,YAAa,IAEjBpC,EAAU,IAAID,EAAQiC,IACtBlC,EAAS,GAAG,EAmIqCwB,UAAU,aAAYC,SAAC,sEAIpEd,EAAAA,EAAAA,MAAA,OAAKa,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0EAEJd,EAAAA,EAAAA,MAAA,MAAAc,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8SACHxB,EAAOsC,KAAIC,IACR7B,EAAAA,EAAAA,MAAA,MAAiBa,UAAU,aAAYC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOY,EAAIH,UACXR,SAAWf,IAAM2B,OA/EdC,EA+EoCF,EAAIvB,GA/E/B0B,EA+EmC7B,EAAEgB,OAAOF,WA9EhF1B,EAAUD,EAAOsC,KAAIC,GACjBA,EAAIvB,KAAOyB,EACL,IAAKF,EAAKH,UAAWM,GACrBH,KAJgBC,IAACC,EAASC,CA+EmD,EAC/DnB,UAAU,cACVO,YAAY,mEAGhBL,EAAAA,EAAAA,KAAA,MAAAD,SACKe,EAAIF,YAAYC,KAAIK,IACjBjC,EAAAA,EAAAA,MAAA,MAAAc,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOgB,EAAGC,SACVhB,SAAWf,IAAMgC,OA1H1BJ,EA0HgDF,EAAIvB,GA1H3C8B,EA0H+CH,EAAG3B,GA1HrC+B,EA0HyClC,EAAEgB,OAAOF,WAzHnG1B,EAAUD,EAAOsC,KAAIC,GACjBA,EAAIvB,KAAOyB,EACL,IACKF,EACHF,YAAaE,EAAIF,YAAYC,KAAIK,GAC7BA,EAAG3B,KAAO8B,EACJ,IAAKH,EAAIC,SAAUG,GACnBJ,KAGZJ,KAXgBM,IAACJ,EAASK,EAAaC,CA0HyD,EACtExB,UAAU,cACVyB,UAAQ,KAEZvB,EAAAA,EAAAA,KAAA,SACIC,KAAK,SACLC,MAAOgB,EAAGzC,MACV0B,SAAWf,IAAMoC,OAjH9BR,EAiHgDF,EAAIvB,GAjH3C8B,EAiH+CH,EAAG3B,GAjHrCkC,EAiHyCrC,EAAEgB,OAAOF,WAhH/F1B,EAAUD,EAAOsC,KAAIC,GACjBA,EAAIvB,KAAOyB,EACL,IACKF,EACHF,YAAaE,EAAIF,YAAYC,KAAIK,GAC7BA,EAAG3B,KAAO8B,EACJ,IAAKH,EAAIzC,MAAOgD,GAChBP,KAGZJ,KAXYU,IAACR,EAASK,EAAaI,CAiHyD,EAClE3B,UAAU,cACVO,YAAY,8BAEhBL,EAAAA,EAAAA,KAAA,UAAQM,QAASA,KAAMoB,OAlJlCV,EAkJkDF,EAAIvB,GAlJ7C8B,EAkJiDH,EAAG3B,QAjJlFf,EAAUD,EAAOsC,KAAIC,GACbA,EAAIvB,KAAOyB,EACJ,IACAF,EACHF,YAAaE,EAAIF,YAAYe,QAAOT,GAAMA,EAAG3B,KAAO8B,KAGrDP,KARSY,IAACV,EAASK,CAkJwD,EAACvB,UAAU,gBAAeC,SAAC,aAf5EmB,EAAG3B,SAqBpBS,EAAAA,EAAAA,KAAA,UACIC,KAAK,SACLK,QAASA,IAAM1B,EAAmBkC,EAAIvB,IACtCO,UAAW,kBAAiBnB,IAAoBmC,EAAIvB,GAAK,WAAa,IAAKQ,SAC1EpB,IAAoBmC,EAAIvB,GAAK,uCAAW,2CApCxCuB,EAAIvB,YA0CxBZ,IACGM,EAAAA,EAAAA,MAAA,OAAKa,UAAU,cAAaC,SAAA,EACxBd,EAAAA,EAAAA,MAAA,UACIiB,MAAOrB,EACPsB,SAAWf,GAAMN,EAAaM,EAAEgB,OAAOF,OACvCJ,UAAU,cAAaC,SAAA,EAEvBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAGqB,UAAQ,EAAAxB,SAAC,8GAC1BC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,iFAAeH,SAAC,oFAC9BC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,iCAAOH,SAAC,oCACtBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,6CAASH,SAAC,mDAE5BC,EAAAA,EAAAA,KAAA,SACIC,KAAK,SACLC,MAAOzB,EACP0B,SAAWf,GAAMV,EAASU,EAAEgB,OAAOF,OACnCG,YAAY,sEACZP,UAAU,iBAEdE,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASK,QAtMjBsB,KACO,OAApBjD,GAAsC,OAAVF,IAC5BD,EAAUD,EAAOsC,KAAIC,GACbA,EAAIvB,KAAOZ,EACJ,IACAmC,EACHF,YAAa,IAAIE,EAAIF,YAAa,CAAErB,GAAIkB,KAAKC,MAAOS,SAAUtC,EAAWJ,MAAOA,KAGjFqC,KAEXhC,EAAa,IACbJ,EAAS,IACb,EAyLyDoB,UAAU,aAAYC,SAAC,wMAO5EC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASH,UAAU,gBAAeC,SAC1C/B,EAAc,sEAAiB,kEAEnCA,IAAegC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASK,QAAStB,EAAWc,UAAU,gBAAeC,SAAC,6DACjF,EC+Gf,EA3VuBlC,IAAsF,IAArF,SAAEC,EAAQ,YAAEC,EAAW,eAAE8D,EAAc,kBAAEC,EAAiB,UAAEC,EAAS,OAAEC,GAAQnE,EACnG,MAAOoE,EAAaC,IAAkB9D,EAAAA,EAAAA,UAAS,KACxC+D,EAAYC,IAAiBhE,EAAAA,EAAAA,UAAS,KACtCF,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BiE,EAAOC,IAAYlE,EAAAA,EAAAA,UAAS,KAC5BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BmE,EAAgBC,IAAqBpE,EAAAA,EAAAA,UAAS,KAC9CS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,KACpCO,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAS,KAEvDW,EAAAA,EAAAA,YAAU,KACF8C,IACAK,EAAeL,EAAeI,aAC9BG,EAAcP,EAAeM,YAC7BG,EAAST,EAAe3D,MAC5B,GACD,CAAC2D,IAqIJ,OACI5C,EAAAA,EAAAA,MAAA,QAAMC,SA3BWC,UACjBC,EAAEC,iBACF,MAAMoD,EAAMZ,EACN,0CAA0C/D,IAC1C,+CACN,UACU2B,EAAAA,EAAMC,IAAI+C,EAAK,CACjBlD,GAAIzB,EACJmE,cACAE,aACAE,QACAN,aACD,CACCpC,QAAS,CAAE,eAAgB,sBAE/B5B,IACAmE,EAAe,IACfE,EAAc,IACdjE,EAAQ,IACRmE,EAAS,IACTR,EAAkB,KACtB,CAAE,MAAOlC,GACLC,QAAQD,MAAMA,EAClB,GAI8BE,UAAU,mBAAkBC,SAAA,EACtDC,EAAAA,EAAAA,KAAA,MAAAD,SAAK8B,EAAiB,0GAAuB,qFAC7C7B,EAAAA,EAAAA,KAAA,SACIF,UAAU,cACVG,KAAK,OACLC,MAAO+B,EACP9B,SAAWf,GAAM8C,EAAe9C,EAAEgB,OAAOF,OACzCG,YAAY,oEAEhBL,EAAAA,EAAAA,KAAA,SACIF,UAAU,cACVG,KAAK,OACLC,MAAOiC,EACPhC,SAAWf,GAAMgD,EAAchD,EAAEgB,OAAOF,OACxCG,YAAY,0MAEhBpB,EAAAA,EAAAA,MAAA,OAAKa,UAAU,mBAAkBC,SAAA,EAC7Bd,EAAAA,EAAAA,MAAA,UACIiB,MAAOqC,EACPpC,SAAWf,IACP,MAAMsD,EAAeV,EAAOW,IAAIC,SAASC,MAAK3E,GAAQA,EAAKqB,KAAOH,EAAEgB,OAAOF,QAC3EsC,EAAkBpD,EAAEgB,OAAOF,OAC3B/B,GAAoB,OAAZuE,QAAY,IAAZA,OAAY,EAAZA,EAAcxE,OAAQ,GAAG,EAErC4B,UAAU,eAAcC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAEH,SAAC,wEAChBiC,EAAOW,IAAIC,SAAS/B,KAAK3C,IACtB8B,EAAAA,EAAAA,KAAA,UAAsBE,MAAOhC,EAAKqB,GAAGQ,SAChC7B,EAAKA,MADGA,EAAKqB,UAK1BS,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASK,QA/IlBwC,KACZ,MAAMC,EAAU,CACZxD,GAAIkB,KAAKC,MAAMsC,WACf9E,KAAMA,EACNG,MAAO,IAEXiE,EAAS,IAAID,EAAOU,IACpB5E,EAAQ,GAAG,EAwIqC2B,UAAU,eAAcC,SAAC,sEAIrEd,EAAAA,EAAAA,MAAA,OAAKa,UAAU,aAAYC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oEACJC,EAAAA,EAAAA,KAAA,MAAAD,SACKsC,EAAMxB,KAAKoC,IACRhE,EAAAA,EAAAA,MAAA,MAAiBa,UAAU,YAAWC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAO+C,EAAI/E,KACXiC,SAAWf,IAAM8D,OAxHrBC,EAwHoCF,EAAI1D,GAxHhC6D,EAwHoChE,EAAEgB,OAAOF,WAvHzEoC,EAASD,EAAMxB,KAAIoC,GACfA,EAAI1D,KAAO4D,EACL,IAAKF,EAAK/E,KAAMkF,GAChBH,KAJSC,IAACC,EAAQC,CAwHoD,EACxD/C,YAAY,mBAEhBL,EAAAA,EAAAA,KAAA,UAAQF,UAAU,aAAaQ,QAASA,KAAM+C,OAtG5CF,EAsG6DF,EAAI1D,QArGvF+C,EAASD,EAAMV,QAAOsB,GAAOA,EAAI1D,KAAO4D,KADlBA,KAsGqE,EAAApD,SAAC,YAGxEC,EAAAA,EAAAA,KAAA,MAAAD,SACKkD,EAAI5E,MAAMiF,OAAS,EAChBL,EAAI5E,MAAMwC,KAAKC,IACX7B,EAAAA,EAAAA,MAAA,MAAiBa,UAAU,aAAYC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOY,EAAIH,UACXR,SAAWf,IAAMmE,OA7HpCJ,EA6HoDF,EAAI1D,GA7HhDyB,EA6HoDF,EAAIvB,GA7H/C0B,EA6HmD7B,EAAEgB,OAAOF,WA5HlGoC,EAASD,EAAMxB,KAAIoC,GACfA,EAAI1D,KAAO4D,EACL,IACKF,EACH5E,MAAO4E,EAAI5E,MAAMwC,KAAIC,GACjBA,EAAIvB,KAAOyB,EAAU,IAAKF,EAAKH,UAAWM,GAAiBH,KAGjEmC,KATUM,IAACJ,EAAQnC,EAASC,CA6HmE,EACjEZ,YAAY,gBAEhBL,EAAAA,EAAAA,KAAA,UAAQF,UAAU,aAAaQ,QAASA,KAAMkD,OA/G3DL,EA+G6EF,EAAI1D,GA/GzEyB,EA+G6EF,EAAIvB,QA9GhH+C,EAASD,EAAMxB,KAAIoC,GACfA,EAAI1D,KAAO4D,EACL,IAAKF,EAAK5E,MAAO4E,EAAI5E,MAAMsD,QAAOb,GAAOA,EAAIvB,KAAOyB,KACpDiC,KAJYO,IAACL,EAAQnC,CA+GqF,EAAAjB,SAAC,YAKjFC,EAAAA,EAAAA,KAAA,MAAAD,SACKe,EAAIF,YAAY0C,OAAS,EACtBxC,EAAIF,YAAYC,KAAK4C,IACjBxE,EAAAA,EAAAA,MAAA,MAAiBa,UAAU,kBAAiBC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOuD,EAAItC,SACXhB,SAAWf,IACP,MAAMsE,EAAoB5C,EAAIF,YAAYC,KAAIK,GAC1CA,EAAG3B,KAAOkE,EAAIlE,GACR,IAAK2B,EAAIN,YAAaxB,EAAEgB,OAAOF,OAC/BgB,IAEVoB,EAASD,EAAMxB,KAAIoC,GACfA,EAAI1D,KAAOgD,EACL,IACKU,EACH5E,MAAO4E,EAAI5E,MAAMwC,KAAIC,GACjBA,EAAIvB,KAAOZ,EACL,IAAKmC,EAAKF,YAAa8C,GACvB5C,KAGZmC,IACR,EAEN5C,YAAY,qBAEhBL,EAAAA,EAAAA,KAAA,UAAQF,UAAU,aAAaQ,QAASA,KAAMqD,OAxIvER,EAwI6FF,EAAI1D,GAxIzFyB,EAwI6FF,EAAIvB,GAxIxF8B,EAwI4FoC,EAAIlE,QAvI5I+C,EAASD,EAAMxB,KAAIoC,GACfA,EAAI1D,KAAO4D,EACL,IACKF,EACH5E,MAAO4E,EAAI5E,MAAMwC,KAAIC,GACjBA,EAAIvB,KAAOyB,EACL,IAAKF,EAAKF,YAAaE,EAAIF,YAAYe,QAAO8B,GAAOA,EAAIlE,KAAO8B,KAChEP,KAGZmC,KAXgBU,IAACR,EAAQnC,EAASK,CAwIoG,EAAAtB,SAAC,aAzBxF0D,EAAIlE,OA+BjBS,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iCA9CPe,EAAIvB,OAoDjBS,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BAjEPkD,EAAI1D,YA0EzBN,EAAAA,EAAAA,MAAA,OAAKa,UAAU,kBAAiBC,SAAA,EAC5Bd,EAAAA,EAAAA,MAAA,UACIiB,MAAOqC,EACPpC,SAAWf,IAAQoD,EAAkBpD,EAAEgB,OAAOF,MAAM,EACpDJ,UAAU,eAAcC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAEH,SAAC,wEAChBsC,EAAMxB,KAAKoC,IACRjD,EAAAA,EAAAA,KAAA,UAAqBE,MAAO+C,EAAI/E,KAAMiC,SAAUA,IAAMhC,EAAQ8E,EAAI/E,MAAM6B,SACnEkD,EAAI/E,MADI+E,EAAI1D,UAKzBN,EAAAA,EAAAA,MAAA,UACIiB,MAAO7B,EACP8B,SAAWf,GAAMd,EAASc,EAAEgB,OAAOF,OACnCJ,UAAU,eAAcC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAEH,SAAC,wEAChBF,QAAQ+D,IAAIrB,GACZP,EAAOW,IAAIC,SACPjB,QAAQzD,GAASA,EAAKA,OAASqE,IAC/BsB,SAAS3F,GAASA,EAAKG,QACvBwC,KAAKC,IACFd,EAAAA,EAAAA,KAAA,UAA4BE,MAAOY,EAAIH,UAAUZ,SAC5Ce,EAAIH,WADIG,EAAIH,iBAK7BX,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASK,QApRjBC,KACb,IAAKgC,EAED,YADAuB,MAAM,4LAIV,MAAMtD,EAAW,CACbjB,GAAIkB,KAAKC,MAAMsC,WACfrC,UAAWtC,EACXuC,YAAa,GACbmD,KAAM,IAGVzB,EAASD,EAAMxB,KAAIoC,GACfA,EAAI/E,OAASqE,EACP,IAAKU,EAAK5E,MAAO,IAAI4E,EAAI5E,MAAOmC,IAChCyC,KAGV3E,EAAS,GAAG,EAiQqCwB,UAAU,gBAAeC,SAAC,sEAMvEd,EAAAA,EAAAA,MAAA,OAAKa,UAAU,uBAAsBC,SAAA,EACjCd,EAAAA,EAAAA,MAAA,UACIiB,MAAOvB,EACPwB,SAAWf,GAAMR,EAAmBQ,EAAEgB,OAAOF,OAC7CJ,UAAU,eAAcC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAEH,SAAC,wEAChBsC,EACIV,QAAOsB,GAAOA,EAAI/E,OAASqE,IAC3BsB,SAAQZ,GAAOA,EAAI5E,QACnBwC,KAAKC,IACFd,EAAAA,EAAAA,KAAA,UAAqBE,MAAOY,EAAIH,UAAUZ,SACrCe,EAAIH,WADIG,EAAIvB,UAM7BN,EAAAA,EAAAA,MAAA,UACIiB,MAAOrB,EACPsB,SAAWf,GAAMN,EAAaM,EAAEgB,OAAOF,OACvCJ,UAAU,eAAcC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAEH,SAAC,uGAEhBiC,EAAOW,IAAIC,SACPjB,QAAQzD,GAASA,EAAKA,OAASqE,IAC/BsB,SAAS3F,GAASA,EAAKG,QACvBsD,QAAQtD,GAAUA,EAAMsC,YAAchC,IACtCkF,SAASxF,GAAUA,EAAMuC,cACzBC,KAAKZ,IACFD,EAAAA,EAAAA,KAAA,UAA4BE,MAAOD,EAAKkB,SAASpB,SAC5CE,EAAKkB,UADGlB,EAAKkB,gBAK9BnB,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASK,QA7RbsB,KACjB,IAAKjD,EAED,YADAmF,MAAM,qQAGV,MAAME,EAAe,CACjBzE,GAAIkB,KAAKC,MAAMsC,WACf7B,SAAUtC,GAGdyD,EAASD,EAAMxB,KAAIoC,GACfA,EAAI/E,OAASqE,EACP,IACKU,EACH5E,MAAO4E,EAAI5E,MAAMwC,KAAIC,GACjBA,EAAIH,YAAchC,EACZ,IAAKmC,EAAKF,YAAa,IAAIE,EAAIF,YAAaoD,IAC5ClD,KAGZmC,KAEVnE,EAAa,GAAG,EAuQqCgB,UAAU,qBAAoBC,SAAC,qGAKhFC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASH,UAAU,aAAYC,SACvC8B,EAAiB,wFAAoB,sFAEvC,ECpNf,EAhIqBoC,KACjB,MAAOjC,EAAQkC,IAAa9F,EAAAA,EAAAA,UAAS,OAC9BJ,EAAaC,IAAkBG,EAAAA,EAAAA,UAAS,OACxCyD,EAAgBC,IAAqB1D,EAAAA,EAAAA,UAAS,OAC9C2D,EAAWoC,IAAgB/F,EAAAA,EAAAA,UAAS,MACrCgG,GAAWC,EAAAA,EAAAA,OACX,SAAEvG,GAAasG,EAASE,OAAS,CAAC,EACxCzE,QAAQ+D,IAAI9F,GACZ,MAAMC,EAAcoB,UAChB,MAAMoF,QAAY9E,EAAAA,EAAM+E,IAAI,oCAAoC1G,KAChEoG,EAAUK,EAAIE,KAAK,IACnB5E,QAAQ+D,IAAIW,EAAIE,KAAK,GAGzB1F,EAAAA,EAAAA,YAAU,KACNhB,GAAa,GACd,CAACD,IAkDJ,OAAKkE,GAGD/C,EAAAA,EAAAA,MAAA,OAAKa,UAAU,gBAAeC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAEiC,EAAOW,IAAI+B,cACxC1E,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SACxBiC,EAAOW,IAAIC,SAAS/B,KAAI3C,IACrBe,EAAAA,EAAAA,MAAA,MAAkBa,UAAU,gBAAeC,SAAA,CACtC7B,EAAKA,MACN8B,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IA1DdnB,WACnB,UACUM,EAAAA,EAAMkF,OAAO,qDAAqD7G,KAAY8G,KACpF7G,GACJ,CAAE,MAAO6B,GACLC,QAAQD,MAAM,2BAA4BA,EAC9C,GAoDuCiF,CAAe3G,EAAKqB,IAAKO,UAAU,gBAAeC,SAAC,sDAC1EC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IAAMrC,EAAeC,GAAO4B,UAAU,cAAaC,SAAC,kEACrEC,EAAAA,EAAAA,KAAA,MAAAD,SACK7B,EAAKG,MAAMwC,KAAIC,IACZ7B,EAAAA,EAAAA,MAAA,MAAiBa,UAAU,aAAYC,SAAA,CAClCe,EAAIH,WACLX,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IAvD7BnB,OAAOyF,EAAY5D,KACnC,UACUvB,EAAAA,EAAMkF,OAAO,oDAAoD7G,KAAY8G,KAAc5D,KACjGjD,GACJ,CAAE,MAAO6B,GACLC,QAAQD,MAAM,wBAAyBA,EAC3C,GAiDmDkF,CAAY5G,EAAKqB,GAAIuB,EAAIvB,IAAKO,UAAU,gBAAeC,SAAC,sDAC/EC,EAAAA,EAAAA,KAAA,MAAAD,SACKe,EAAIF,YAAYC,KAAIK,IACjBjC,EAAAA,EAAAA,MAAA,MAAgBa,UAAU,kBAAiBC,SAAA,CACtCmB,EAAGC,SACHtB,QAAQ+D,IAAI1C,EAAG3B,KAChBS,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IApDrCnB,OAAOyF,EAAY5D,EAASK,KAChD,IACIxB,QAAQ+D,IAAIgB,EAAY5D,EAASK,SAE3B5B,EAAAA,EAAMkF,OAAO,qDAAqD7G,IAAY,CAChF2G,KAAM,CAAEG,aAAY5D,UAASK,iBAGjCtD,GACJ,CAAE,MAAO6B,GACLC,QAAQD,MAAM,6BAA8BA,EAChD,GAyC+D8B,CAAgBxD,EAAKqB,GAAIuB,EAAIvB,GAAI2B,EAAG3B,IAAKO,UAAU,gBAAeC,SAAC,uDAHrFmB,EAAG3B,UALfuB,EAAIvB,UANhBrB,EAAKqB,SAyBtBS,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,eAAcC,SACvBiC,EAAOW,IAAIoC,QAAQlE,KAAImE,IACpB/F,EAAAA,EAAAA,MAAA,MAA2Ba,UAAU,eAAcC,SAAA,CAC9CiF,EAAEP,KAAKxC,aACRjC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IApDfnB,WAClB,UACUM,EAAAA,EAAMkF,OAAO,oDAAoD7G,KAAYiE,KACnFhE,GACJ,CAAE,MAAO6B,GACLC,QAAQD,MAAM,0BAA2BA,EAC7C,GA8CuCqF,CAAcD,EAAEP,KAAK1C,WAAYjC,UAAU,gBAAeC,SAAC,sDAClFC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IA5CZ4E,EAACH,EAAShD,KAC/BD,EAAkBiD,GAClBZ,EAAapC,EAAU,EA0CgBmD,CAAiBF,EAAEP,KAAMO,EAAEP,KAAK1C,WAAYjC,UAAU,cAAaC,SAAC,mEAHtFiF,EAAEP,KAAK1C,gBAQxB/B,EAAAA,EAAAA,KAACmF,EAAe,CACZrH,SAAUA,EACVC,YAAaA,EACbC,YAAaA,EACbC,eAAgBA,KAEpB+B,EAAAA,EAAAA,KAACoF,EAAc,CACXtH,SAAUA,EACVC,YAAaA,EACb8D,eAAgBA,EAChBC,kBAAmBA,EACnBC,UAAWA,EACXC,OAAQA,QAxDAhC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cA0Db,EC1Hd,EAN4BsF,KAC1B,MAAM,GAAE9F,IAAO+F,EAAAA,EAAAA,KAEf,OAAOtF,EAAAA,EAAAA,KAACiE,EAAY,CAACnG,SAAUyB,GAAM,C","sources":["services/AdminPanel/data_school/AddLanguageForm/AddLanguageForm.jsx","services/AdminPanel/data_school/AddTeacherForm/AddTeacherForm.jsx","services/AdminPanel/data_school/SchoolDetail/SchoolDetail.jsx","services/AdminPanel/data_school/SchoolDetail/SchoolDetailWrapper.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './AddLanguageForm.css';\r\n\r\nconst AddLanguageForm = ({ schoolId, fetchSchool, editingLang, setEditingLang }) => {\r\n    const [lang, setLang] = useState(''); // Язык — строка\r\n    const [level, setLevel] = useState(''); // Для добавления нового уровня\r\n    const [levels, setLevels] = useState([]); // Список уровней\r\n    const [price, setPrice] = useState(null);\r\n    const [selectedLevelId, setSelectedLevelId] = useState(null); // Текущий выбранный уровень\r\n    const [classType, setClassType] = useState(''); // Для добавления типов занятий\r\n\r\n    useEffect(() => {\r\n        if (editingLang) {\r\n            setLang(editingLang.lang); // Язык - это строка, например 'English'\r\n            setLevels(editingLang.level); // Уровни - массив\r\n        }\r\n    }, [editingLang]);\r\n\r\n    // Добавить новый уровень\r\n    const addLevel = () => {\r\n        const newLevel = {\r\n            id: Date.now(),\r\n            levelName: level,\r\n            lessonTypes: [] // Инициализировать пустым массивом\r\n        };\r\n        setLevels([...levels, newLevel]);\r\n        setLevel(''); // Очистить поле ввода\r\n    };\r\n\r\n    // Добавить тип занятий к выбранному уровню\r\n    const addClassType = () => {\r\n        if (selectedLevelId !== null && price !== null) { // Убедиться, что цена введена\r\n            setLevels(levels.map(lvl => {\r\n                if (lvl.id === selectedLevelId) {\r\n                    return {\r\n                        ...lvl,\r\n                        lessonTypes: [...lvl.lessonTypes, { id: Date.now(), typeName: classType, price: price }]\r\n                    };\r\n                }\r\n                return lvl;\r\n            }));\r\n            setClassType(''); // Очистить поле типа занятий\r\n            setPrice(''); // Очистить поле цены\r\n        }\r\n    };\r\n\r\n    // Удалить тип занятий из уровня\r\n    const deleteClassType = (levelId, classTypeId) => {\r\n        setLevels(levels.map(lvl => {\r\n            if (lvl.id === levelId) {\r\n                return {\r\n                    ...lvl,\r\n                    lessonTypes: lvl.lessonTypes.filter(ct => ct.id !== classTypeId)\r\n                };\r\n            }\r\n            return lvl;\r\n        }));\r\n    };\r\n\r\n    // Изменить тип занятия\r\n    const handleClassTypeChange = (levelId, classTypeId, newTypeName) => {\r\n        setLevels(levels.map(lvl =>\r\n            lvl.id === levelId\r\n                ? {\r\n                    ...lvl,\r\n                    lessonTypes: lvl.lessonTypes.map(ct =>\r\n                        ct.id === classTypeId\r\n                            ? { ...ct, typeName: newTypeName }\r\n                            : ct\r\n                    )\r\n                }\r\n                : lvl\r\n        ));\r\n    };\r\n\r\n    // Изменить цену типа занятий\r\n    const handlePriceChange = (levelId, classTypeId, newPrice) => {\r\n        setLevels(levels.map(lvl =>\r\n            lvl.id === levelId\r\n                ? {\r\n                    ...lvl,\r\n                    lessonTypes: lvl.lessonTypes.map(ct =>\r\n                        ct.id === classTypeId\r\n                            ? { ...ct, price: newPrice }\r\n                            : ct\r\n                    )\r\n                }\r\n                : lvl\r\n        ));\r\n    };\r\n\r\n    // Изменить название уровня\r\n    const handleLevelNameChange = (levelId, newLevelName) => {\r\n        setLevels(levels.map(lvl =>\r\n            lvl.id === levelId\r\n                ? { ...lvl, levelName: newLevelName }\r\n                : lvl\r\n        ));\r\n    };\r\n\r\n    // Отправить данные на сервер\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const endpoint = editingLang\r\n            ? `http://13.60.221.226/api/editLanguageForSchool/${schoolId}/${editingLang.id}`\r\n            : 'http://13.60.221.226/api/addLanguageForSchool';\r\n\r\n        const payload = {\r\n            id: schoolId,\r\n            lang, // Язык\r\n            levels // Уровни\r\n        };\r\n\r\n        try {\r\n            await axios.put(endpoint, payload, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            fetchSchool(); // Обновить данные школы\r\n            resetForm(); // Сброс формы\r\n        } catch (error) {\r\n            console.error('Error saving language:', error);\r\n        }\r\n    };\r\n\r\n    // Сброс формы\r\n    const resetForm = () => {\r\n        setLang('');\r\n        setLevels([]);\r\n        setClassType('');\r\n        setLevel('');\r\n        setEditingLang(null);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"language-form\">\r\n            <h1>{editingLang ? 'Редагувати мову' : 'Додати мову'}</h1>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={lang}\r\n                    onChange={(e) => setLang(e.target.value)}\r\n                    placeholder=\"Введіть мову\"\r\n                    className=\"input-field\"\r\n                />\r\n            </div>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={level}\r\n                    onChange={(e) => setLevel(e.target.value)}\r\n                    placeholder=\"Введіть курс\"\r\n                    className=\"input-field\"\r\n                />\r\n                <button type=\"button\" onClick={addLevel} className=\"add-button\">\r\n                    Додати курс\r\n                </button>\r\n            </div>\r\n            <div className=\"levels-list\">\r\n                <h3>Додані курси:</h3>\r\n\r\n                <ul>\r\n                    <h4>Додайте та оберіть курс для додавання типу занять та ціни</h4>\r\n                    {levels.map(lvl => (\r\n                        <li key={lvl.id} className=\"level-item\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={lvl.levelName}\r\n                                onChange={(e) => handleLevelNameChange(lvl.id, e.target.value)}\r\n                                className=\"input-field\"\r\n                                placeholder=\"Назва курсу\"\r\n                            />\r\n\r\n                            <ul>\r\n                                {lvl.lessonTypes.map(ct => (\r\n                                    <li key={ct.id}>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={ct.typeName}\r\n                                            onChange={(e) => handleClassTypeChange(lvl.id, ct.id, e.target.value)}\r\n                                            className=\"input-field\"\r\n                                            disabled\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={ct.price}\r\n                                            onChange={(e) => handlePriceChange(lvl.id, ct.id, e.target.value)}\r\n                                            className=\"input-field\"\r\n                                            placeholder=\"Ціна\"\r\n                                        />\r\n                                        <button onClick={() => deleteClassType(lvl.id, ct.id)} className=\"delete-button\">\r\n                                            ✖\r\n                                        </button>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => setSelectedLevelId(lvl.id)}\r\n                                className={`select-button ${selectedLevelId === lvl.id ? 'selected' : ''}`}>\r\n                                {selectedLevelId === lvl.id ? 'Обрано' : 'Обрати'}\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            {selectedLevelId && (\r\n                <div className=\"input-group\">\r\n                    <select\r\n                        value={classType}\r\n                        onChange={(e) => setClassType(e.target.value)}\r\n                        className=\"input-field\"\r\n                    >\r\n                        <option value=\"\" disabled>Виберіть тип занять</option>\r\n                        <option value=\"Індивідуальні\">Індивідуальні</option>\r\n                        <option value=\"Парні\">Парні</option>\r\n                        <option value=\"Групові\">Групові</option>\r\n                    </select>\r\n                    <input\r\n                        type=\"number\" // Поле для ввода цены\r\n                        value={price}\r\n                        onChange={(e) => setPrice(e.target.value)}\r\n                        placeholder=\"Введіть ціну\"\r\n                        className=\"input-field\"\r\n                    />\r\n                    <button type=\"button\" onClick={addClassType} className=\"add-button\">\r\n                        Додати тип занять до вибраного рівня\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n\r\n            <button type=\"submit\" className=\"submit-button\">\r\n                {editingLang ? 'Оновити дані' : 'Додати мову'}\r\n            </button>\r\n            {editingLang && <button type=\"button\" onClick={resetForm} className=\"cancel-button\">Скасувати</button>}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddLanguageForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './AddTeacherForm.css';\r\n\r\nconst AddTeacherForm = ({ schoolId, fetchSchool, editingTeacher, setEditingTeacher, teacherId, school }) => {\r\n    const [teacherName, setTeacherName] = useState('');\r\n    const [teacherImg, setTeacherImg] = useState('');\r\n    const [lang, setLang] = useState('');\r\n    const [langs, setLangs] = useState([]);\r\n    const [level, setLevel] = useState('');\r\n    const [selectedLangId, setSelectedLangId] = useState('');\r\n    const [classType, setClassType] = useState('');\r\n    const [selectedLevelId, setSelectedLevelId] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (editingTeacher) {\r\n            setTeacherName(editingTeacher.teacherName);\r\n            setTeacherImg(editingTeacher.teacherImg);\r\n            setLangs(editingTeacher.lang);\r\n        }\r\n    }, [editingTeacher]);\r\n\r\n    const addLevel = () => {\r\n        if (!selectedLangId) {\r\n            alert('Виберіть мову для доповнення рівня');\r\n            return;\r\n        }\r\n\r\n        const newLevel = {\r\n            id: Date.now().toString(),\r\n            levelName: level,\r\n            lessonTypes: [],\r\n            date: [],\r\n        };\r\n\r\n        setLangs(langs.map(lng =>\r\n            lng.lang === selectedLangId\r\n                ? { ...lng, level: [...lng.level, newLevel] }\r\n                : lng\r\n        ));\r\n\r\n        setLevel('');\r\n    };\r\n\r\n    const addLang = () => {\r\n        const newLang = {\r\n            id: Date.now().toString(),\r\n            lang: lang,\r\n            level: [],\r\n        };\r\n        setLangs([...langs, newLang]);\r\n        setLang('');\r\n    };\r\n\r\n    const addClassType = () => {\r\n        if (!selectedLevelId) {\r\n            alert('Виберіть рівень для доповнення типу зайнятостей');\r\n            return;\r\n        }\r\n        const newClassType = {\r\n            id: Date.now().toString(),\r\n            typeName: classType,\r\n        };\r\n\r\n        setLangs(langs.map(lng =>\r\n            lng.lang === selectedLangId\r\n                ? {\r\n                    ...lng,\r\n                    level: lng.level.map(lvl =>\r\n                        lvl.levelName === selectedLevelId\r\n                            ? { ...lvl, lessonTypes: [...lvl.lessonTypes, newClassType] }\r\n                            : lvl\r\n                    ),\r\n                }\r\n                : lng\r\n        ));\r\n        setClassType('');\r\n    };\r\n\r\n    const handleEditLang = (langId, newLangName) => {\r\n        setLangs(langs.map(lng =>\r\n            lng.id === langId\r\n                ? { ...lng, lang: newLangName }\r\n                : lng\r\n        ));\r\n    };\r\n\r\n    const handleEditLevel = (langId, levelId, newLevelName) => {\r\n        setLangs(langs.map(lng =>\r\n            lng.id === langId\r\n                ? {\r\n                    ...lng,\r\n                    level: lng.level.map(lvl =>\r\n                        lvl.id === levelId ? { ...lvl, levelName: newLevelName } : lvl\r\n                    )\r\n                }\r\n                : lng\r\n        ));\r\n    };\r\n\r\n    const handleDeleteLang = (langId) => {\r\n        setLangs(langs.filter(lng => lng.id !== langId));\r\n    };\r\n\r\n    const handleDeleteLevel = (langId, levelId) => {\r\n        setLangs(langs.map(lng =>\r\n            lng.id === langId\r\n                ? { ...lng, level: lng.level.filter(lvl => lvl.id !== levelId) }\r\n                : lng\r\n        ));\r\n    };\r\n\r\n    const handleDeleteClassType = (langId, levelId, classTypeId) => {\r\n        setLangs(langs.map(lng =>\r\n            lng.id === langId\r\n                ? {\r\n                    ...lng,\r\n                    level: lng.level.map(lvl =>\r\n                        lvl.id === levelId\r\n                            ? { ...lvl, lessonTypes: lvl.lessonTypes.filter(cls => cls.id !== classTypeId) }\r\n                            : lvl\r\n                    )\r\n                }\r\n                : lng\r\n        ));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const url = editingTeacher\r\n            ? `http://13.60.221.226/api/updateTeacher/${schoolId}`\r\n            : `http://13.60.221.226/api/addTeacherForSchool`;\r\n        try {\r\n            await axios.put(url, {\r\n                id: schoolId,\r\n                teacherName,\r\n                teacherImg,\r\n                langs,\r\n                teacherId,\r\n            }, {\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n            fetchSchool();\r\n            setTeacherName('');\r\n            setTeacherImg('')\r\n            setLang('');\r\n            setLangs([]);\r\n            setEditingTeacher(null);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"add-teacher-form\">\r\n            <h1>{editingTeacher ? 'Редагувати вчителя' : 'Додати вчителя'}</h1>\r\n            <input\r\n                className=\"input-field\"\r\n                type=\"text\"\r\n                value={teacherName}\r\n                onChange={(e) => setTeacherName(e.target.value)}\r\n                placeholder=\"Ім'я вчителя\"\r\n            />\r\n            <input\r\n                className=\"input-field\"\r\n                type=\"text\"\r\n                value={teacherImg}\r\n                onChange={(e) => setTeacherImg(e.target.value)}\r\n                placeholder=\"Посилання на фотографію (напр. https://i.postimg.cc/63c0Qbkn/image.jpg)\"\r\n            />\r\n            <div className=\"lang-input-group\">\r\n                <select\r\n                    value={selectedLangId}\r\n                    onChange={(e) => {\r\n                        const selectedLang = school.ESL.language.find(lang => lang.id === e.target.value);\r\n                        setSelectedLangId(e.target.value);\r\n                        setLang(selectedLang?.lang || ''); // Устанавливаем выбранный язык в setLang\r\n                    }}\r\n                    className=\"select-field\"\r\n                >\r\n                    <option value=\"\">Оберіть мову</option>\r\n                    {school.ESL.language.map((lang) => (\r\n                        <option key={lang.id} value={lang.id}>\r\n                            {lang.lang}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                <button type=\"button\" onClick={addLang} className=\"add-lang-btn\">\r\n                    Додати мову\r\n                </button>\r\n            </div>\r\n            <div className=\"langs-list\">\r\n                <h3>Додані мови:</h3>\r\n                <ul>\r\n                    {langs.map((lng) => (\r\n                        <li key={lng.id} className=\"lang-item\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={lng.lang}\r\n                                onChange={(e) => handleEditLang(lng.id, e.target.value)}\r\n                                placeholder=\"Edit Language\"\r\n                            />\r\n                            <button className=\"delete-btn\" onClick={() => handleDeleteLang(lng.id)}>\r\n                                ✖\r\n                            </button>\r\n                            <ul>\r\n                                {lng.level.length > 0 ? (\r\n                                    lng.level.map((lvl) => (\r\n                                        <li key={lvl.id} className=\"level-item\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                value={lvl.levelName}\r\n                                                onChange={(e) => handleEditLevel(lng.id, lvl.id, e.target.value)}\r\n                                                placeholder=\"Edit Level\"\r\n                                            />\r\n                                            <button className=\"delete-btn\" onClick={() => handleDeleteLevel(lng.id, lvl.id)}>\r\n                                                ✖\r\n                                            </button>\r\n\r\n                                            {/* Class types for each level */}\r\n                                            <ul>\r\n                                                {lvl.lessonTypes.length > 0 ? (\r\n                                                    lvl.lessonTypes.map((cls) => (\r\n                                                        <li key={cls.id} className=\"class-type-item\">\r\n                                                            <input\r\n                                                                type=\"text\"\r\n                                                                value={cls.typeName}\r\n                                                                onChange={(e) => {\r\n                                                                    const updatedClassTypes = lvl.lessonTypes.map(ct =>\r\n                                                                        ct.id === cls.id\r\n                                                                            ? { ...ct, lessonTypes: e.target.value }\r\n                                                                            : ct\r\n                                                                    );\r\n                                                                    setLangs(langs.map(lng =>\r\n                                                                        lng.id === selectedLangId\r\n                                                                            ? {\r\n                                                                                ...lng,\r\n                                                                                level: lng.level.map(lvl =>\r\n                                                                                    lvl.id === selectedLevelId\r\n                                                                                        ? { ...lvl, lessonTypes: updatedClassTypes }\r\n                                                                                        : lvl\r\n                                                                                ),\r\n                                                                            }\r\n                                                                            : lng\r\n                                                                    ));\r\n                                                                }}\r\n                                                                placeholder=\"Edit Class Type\"\r\n                                                            />\r\n                                                            <button className=\"delete-btn\" onClick={() => handleDeleteClassType(lng.id, lvl.id, cls.id)}>\r\n                                                                ✖\r\n                                                            </button>\r\n                                                        </li>\r\n                                                    ))\r\n                                                ) : (\r\n                                                    <li>No class types added yet</li>\r\n                                                )}\r\n                                            </ul>\r\n                                        </li>\r\n                                    ))\r\n                                ) : (\r\n                                    <li>No levels added yet</li>\r\n                                )}\r\n                            </ul>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            {/* Додати курс section */}\r\n            <div className=\"add-level-group\">\r\n                <select\r\n                    value={selectedLangId}\r\n                    onChange={(e) => { setSelectedLangId(e.target.value) }}\r\n                    className=\"select-field\"\r\n                >\r\n                    <option value=\"\">Оберіть мову</option>\r\n                    {langs.map((lng) => (\r\n                        <option key={lng.id} value={lng.lang} onChange={() => setLang(lng.lang)}>\r\n                            {lng.lang}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                <select\r\n                    value={level}\r\n                    onChange={(e) => setLevel(e.target.value)}\r\n                    className=\"select-field\"\r\n                >\r\n                    <option value=\"\">Оберіть курс</option>\r\n                    {console.log(selectedLangId)}\r\n                    {school.ESL.language\r\n                        .filter((lang) => lang.lang === selectedLangId) // Сравниваем по имени языка\r\n                        .flatMap((lang) => lang.level) // Получаем уровни выбранного языка\r\n                        .map((lvl) => (\r\n                            <option key={lvl.levelName} value={lvl.levelName}>\r\n                                {lvl.levelName}\r\n                            </option>\r\n                        ))}\r\n                </select>\r\n                <button type=\"button\" onClick={addLevel} className=\"add-level-btn\">\r\n                    Додати курс\r\n                </button>\r\n            </div>\r\n\r\n            {/* Add class type section */}\r\n            <div className=\"add-class-type-group\">\r\n                <select\r\n                    value={selectedLevelId}\r\n                    onChange={(e) => setSelectedLevelId(e.target.value)}\r\n                    className=\"select-field\"\r\n                >\r\n                    <option value=\"\">Оберіть курс</option>\r\n                    {langs\r\n                        .filter(lng => lng.lang === selectedLangId)\r\n                        .flatMap(lng => lng.level)\r\n                        .map((lvl) => (\r\n                            <option key={lvl.id} value={lvl.levelName}>\r\n                                {lvl.levelName}\r\n                            </option>\r\n                        ))}\r\n                </select>\r\n               \r\n                <select\r\n                    value={classType}\r\n                    onChange={(e) => setClassType(e.target.value)}\r\n                    className=\"select-field\"\r\n                >\r\n                    <option value=\"\">Оберіть тип занять</option>\r\n                    \r\n                    {school.ESL.language\r\n                        .filter((lang) => lang.lang === selectedLangId)\r\n                        .flatMap((lang) => lang.level)\r\n                        .filter((level) => level.levelName === selectedLevelId)\r\n                        .flatMap((level) => level.lessonTypes)\r\n                        .map((type) => (\r\n                            <option key={type.typeName} value={type.typeName}>\r\n                                {type.typeName}\r\n                            </option>\r\n                        ))}\r\n                </select>\r\n                <button type=\"button\" onClick={addClassType} className=\"add-class-type-btn\">\r\n                    Додати тип занять\r\n                </button>\r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"submit-btn\">\r\n                {editingTeacher ? 'Оновити вчителя' : 'Додати вчителя'}\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddTeacherForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport AddLanguageForm from '../AddLanguageForm/AddLanguageForm';\r\nimport AddTeacherForm from '../AddTeacherForm/AddTeacherForm';\r\nimport './SchoolDetail.css';\r\n\r\nconst SchoolDetail = () => {\r\n    const [school, setSchool] = useState(null);\r\n    const [editingLang, setEditingLang] = useState(null);\r\n    const [editingTeacher, setEditingTeacher] = useState(null);\r\n    const [teacherId, setTeacherId] = useState(null);\r\n    const location = useLocation()\r\n    const { schoolId } = location.state || {};\r\n    console.log(schoolId)\r\n    const fetchSchool = async () => {\r\n        const res = await axios.get(`http://13.60.221.226/api/schools/${schoolId}`);\r\n        setSchool(res.data[0]);\r\n        console.log(res.data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchSchool();\r\n    }, [schoolId]);\r\n\r\n    const deleteLanguage = async (languageId) => {\r\n        try {\r\n            await axios.delete(`http://13.60.221.226/api/deleteLanguageFromSchool/${schoolId}/${languageId}`);\r\n            fetchSchool();\r\n        } catch (error) {\r\n            console.error('Error deleting language:', error);\r\n        }\r\n    };\r\n\r\n    const deleteLevel = async (languageId, levelId) => {\r\n        try {\r\n            await axios.delete(`http://13.60.221.226/api/deleteLevelFromLanguage/${schoolId}/${languageId}/${levelId}`);\r\n            fetchSchool();\r\n        } catch (error) {\r\n            console.error('Error deleting level:', error);\r\n        }\r\n    };\r\n\r\n    const deleteClassType = async (languageId, levelId, classTypeId) => {\r\n        try {\r\n            console.log(languageId, levelId, classTypeId); // Check if these values are correct\r\n\r\n            await axios.delete(`http://13.60.221.226/api/deleteClassTypeFromLevel/${schoolId}`, {\r\n                data: { languageId, levelId, classTypeId } // Sending data in the body\r\n            });\r\n\r\n            fetchSchool(); // Fetch the updated school info after deletion\r\n        } catch (error) {\r\n            console.error('Error deleting class type:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const deleteTeacher = async (teacherId) => {\r\n        try {\r\n            await axios.delete(`http://13.60.221.226/api/deleteTeacherFromSchool/${schoolId}/${teacherId}`);\r\n            fetchSchool();\r\n        } catch (error) {\r\n            console.error('Error deleting teacher:', error);\r\n        }\r\n    };\r\n\r\n    const startEditTeacher = (teacher, teacherId) => {\r\n        setEditingTeacher(teacher);\r\n        setTeacherId(teacherId)\r\n    };\r\n\r\n    if (!school) return <p>Loading...</p>;\r\n\r\n    return (\r\n        <div className=\"school-detail\">\r\n            <h2 className=\"school-name\">{school.ESL.schoolName}</h2>\r\n            <h3>Мови:</h3>\r\n            <ul className=\"language-list\">\r\n                {school.ESL.language.map(lang => (\r\n                    <li key={lang.id} className=\"language-item\">\r\n                        {lang.lang}\r\n                        <button onClick={() => deleteLanguage(lang.id)} className=\"delete-button\">Видалити</button>\r\n                        <button onClick={() => setEditingLang(lang)} className=\"edit-button\">Редагувати</button>\r\n                        <ul>\r\n                            {lang.level.map(lvl => (\r\n                                <li key={lvl.id} className=\"level-item\">\r\n                                    {lvl.levelName}\r\n                                    <button onClick={() => deleteLevel(lang.id, lvl.id)} className=\"delete-button\">Видалити</button>\r\n                                    <ul>\r\n                                        {lvl.lessonTypes.map(ct => (\r\n                                            <li key={ct.id} className=\"class-type-item\">\r\n                                                {ct.typeName}\r\n                                                {console.log(ct.id)}\r\n                                                <button onClick={() => deleteClassType(lang.id, lvl.id, ct.id)} className=\"delete-button\">Видалити</button>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <h3>Teachers:</h3>\r\n            <ul className=\"teacher-list\">\r\n                {school.ESL.teacher.map(t => (\r\n                    <li key={t.data.teacherId} className=\"teacher-item\">\r\n                        {t.data.teacherName}\r\n                        <button onClick={() => deleteTeacher(t.data.teacherId)} className=\"delete-button\">Видалити</button>\r\n                        <button onClick={() => startEditTeacher(t.data, t.data.teacherId)} className=\"edit-button\">Редагувати</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <AddLanguageForm\r\n                schoolId={schoolId}\r\n                fetchSchool={fetchSchool}\r\n                editingLang={editingLang}\r\n                setEditingLang={setEditingLang}\r\n            />\r\n            <AddTeacherForm\r\n                schoolId={schoolId}\r\n                fetchSchool={fetchSchool}\r\n                editingTeacher={editingTeacher}\r\n                setEditingTeacher={setEditingTeacher}\r\n                teacherId={teacherId}\r\n                school={school}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SchoolDetail;\r\n","import { useParams } from 'react-router-dom';\r\nimport SchoolDetail from './SchoolDetail';\r\n\r\nconst SchoolDetailWrapper = () => {\r\n  const { id } = useParams(); // Извлечение id из URL\r\n\r\n  return <SchoolDetail schoolId={id} />; // Передача id как schoolId в Languages\r\n};\r\n\r\nexport default SchoolDetailWrapper;\r\n"],"names":["_ref","schoolId","fetchSchool","editingLang","setEditingLang","lang","setLang","useState","level","setLevel","levels","setLevels","price","setPrice","selectedLevelId","setSelectedLevelId","classType","setClassType","useEffect","resetForm","_jsxs","onSubmit","async","e","preventDefault","endpoint","id","payload","axios","put","headers","error","console","className","children","_jsx","type","value","onChange","target","placeholder","onClick","addLevel","newLevel","Date","now","levelName","lessonTypes","map","lvl","handleLevelNameChange","levelId","newLevelName","ct","typeName","handleClassTypeChange","classTypeId","newTypeName","disabled","handlePriceChange","newPrice","deleteClassType","filter","addClassType","editingTeacher","setEditingTeacher","teacherId","school","teacherName","setTeacherName","teacherImg","setTeacherImg","langs","setLangs","selectedLangId","setSelectedLangId","url","selectedLang","ESL","language","find","addLang","newLang","toString","lng","handleEditLang","langId","newLangName","handleDeleteLang","length","handleEditLevel","handleDeleteLevel","cls","updatedClassTypes","handleDeleteClassType","log","flatMap","alert","date","newClassType","SchoolDetail","setSchool","setTeacherId","location","useLocation","state","res","get","data","schoolName","delete","languageId","deleteLanguage","deleteLevel","teacher","t","deleteTeacher","startEditTeacher","AddLanguageForm","AddTeacherForm","SchoolDetailWrapper","useParams"],"sourceRoot":""}