{"version":3,"file":"static/js/719.16c70969.chunk.js","mappings":"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","sources":["common/utils/smallFn/convertDate.js","common/utils/smallFn/calculateTimes.js","pages/chooseDate/testCalendarWithDatePickerDefault.jsx","pages/chooseDate/date.jsx"],"sourcesContent":["import { format } from 'date-fns';\r\nimport { toZonedTime  } from 'date-fns-tz';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nfunction translateUkrainianMonthToEnglish(month) {\r\n    const months = {\r\n        \"січня\": \"January\",\r\n        \"лютого\": \"February\",\r\n        \"березня\": \"March\",\r\n        \"квітня\": \"April\",\r\n        \"травня\": \"May\",\r\n        \"червня\": \"June\",\r\n        \"липня\": \"July\",\r\n        \"серпня\": \"August\",\r\n        \"вересня\": \"September\",\r\n        \"жвтня\": \"October\",\r\n        \"листпада\": \"November\",\r\n        \"грудня\": \"December\"\r\n    };\r\n\r\n    return months[month];\r\n}\r\n\r\nfunction parseUkrainianDate(dateStr) {\r\n    \r\n    const cleanedDateStr = dateStr.replace('р.', '').replace('о', '').trim();\r\n    console.log(cleanedDateStr)\r\n    const [day, monthUkr, year, time, time2, time3] = cleanedDateStr.split(' ');\r\n   \r\n    const monthEng = translateUkrainianMonthToEnglish(monthUkr);\r\n\r\n    // const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}.000+00:00`;\r\n    const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}`;\r\n\r\n    return new Date(formattedDateStr).toUTCString();\r\n}\r\n\r\n\r\n\r\nconst formatDateToUkrainian = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const day = date.getUTCDate();\r\n    const monthNames = ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня'];\r\n    const month = monthNames[date.getUTCMonth()];\r\n    const year = date.getUTCFullYear();\r\n    const hours = String(date.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\r\n  \r\n    return `${day} ${month} ${year} р. о ${hours}:${minutes}`;\r\n  };\r\n\r\nexport {parseUkrainianDate, formatDateToUkrainian};","const calculateCombinedWorkTime = (workTimes) => {\r\n   \r\n    const sortedTimes = workTimes\r\n    .map(time => new Date(new Date(time).getTime() + 1 * 60 * 60 * 1000))\r\n    .sort((a, b) => a - b);\r\n\r\n\r\n    const combined = [];\r\n    let currentInterval = null;\r\n\r\n    sortedTimes.forEach(time => {\r\n        if (!currentInterval) {\r\n            currentInterval = [time, time]; // Start a new interval\r\n        } else {\r\n            // If the current time is within or adjacent to the current interval, extend it\r\n            if (time <= currentInterval[1]) {\r\n                currentInterval[1] = new Date(Math.max(currentInterval[1], time)); // Extend the end time\r\n            } else {\r\n                // Otherwise, push the current interval to the combined list and start a new interval\r\n                combined.push(currentInterval);\r\n             \r\n                currentInterval = [time, time];\r\n            }\r\n        }\r\n    });\r\n\r\n    if (currentInterval) {\r\n        combined.push(currentInterval);\r\n\r\n    }\r\n\r\n    return combined.map(([start]) => ({ start }));\r\n};\r\n\r\nconst calculateNonWorkTime = (nonWorkTime, workTimes) => {\r\n\r\n    workTimes = workTimes.map(wt => {\r\n        if (!wt.start) {\r\n            console.error('Missing time in workTimes:', wt); // Log missing time\r\n            return null; // Skip or return a default value\r\n        }\r\n        const adjustedTime = new Date(wt.start.getTime() - 3 * 60 * 60 * 1000);\r\n        return { ...wt, time: adjustedTime };\r\n    }).filter(wt => wt !== null) // Filter out any null values\r\n        .sort((a, b) => new Date(a.time) - new Date(b.time));\r\n\r\n    if (workTimes.length === 0) {\r\n        console.error('No valid work times available');\r\n        return []; // Return an empty array if there are no valid work times\r\n    }\r\n\r\n    const nonWorkTimes = [];\r\n\r\n    const startOfDay = new Date(new Date(workTimes[0].time).setHours(0, 0, 0, 0));\r\n    console.log(startOfDay)\r\n    const firstWorkTime = new Date(workTimes[0].time);\r\n\r\n    if (startOfDay < firstWorkTime) {\r\n        nonWorkTimes.push({\r\n            start: startOfDay,\r\n            end: new Date(firstWorkTime.getTime() - 60 * 1000) // 1 minute before work starts\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < workTimes.length; i++) {\r\n        const currentStart = new Date(workTimes[i].time);\r\n\r\n        if (workTimes[i].slots === 0) {\r\n            const nextStart = (i < workTimes.length - 1) ? new Date(workTimes[i + 1].time) : new Date(currentStart.setHours(23, 59, 0, 0));\r\n            nonWorkTimes.push({\r\n                start: currentStart,\r\n                end: new Date(nextStart.getTime() - 60 * 1000)\r\n            });\r\n        } else {\r\n            if (i > 0 && workTimes[i - 1].slots !== 0) {\r\n                const previousEnd = new Date(workTimes[i - 1].time);\r\n                if (previousEnd < currentStart) {\r\n                    nonWorkTimes.push({\r\n                        start: new Date(previousEnd.getTime() + 60 * 60 * 1000 - 60 * 1000 * 59), // 1 minute after 1 hour\r\n                        end: new Date(currentStart.getTime() - 60 * 1000)  // 1 minute before the current work interval\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const lastWorkTime = new Date(workTimes[workTimes.length - 1].time);\r\n    const endOfDay = new Date(lastWorkTime);\r\n    endOfDay.setHours(23, 59, 0, 0);\r\n\r\n    if (lastWorkTime < endOfDay) {\r\n        nonWorkTimes.push({\r\n            start: new Date(lastWorkTime.getTime() + 60 * 60 * 1000 - 60 * 1000 * 59),\r\n            end: endOfDay\r\n        });\r\n    }\r\n\r\n    const mergedNonWorkTime = [...nonWorkTimes];\r\n    const uniqueNonWorkTime = Array.from(\r\n        new Set(mergedNonWorkTime.map(nwt => `${nwt.start}-${nwt.end}`))\r\n    ).map(str => {\r\n        const [start, end] = str.split('-');\r\n        return { start: new Date(start), end: new Date(end) };\r\n    });\r\n    console.log(uniqueNonWorkTime)\r\n    return uniqueNonWorkTime;\r\n};\r\n\r\n\r\nconst mergeWorkAndNonWorkTimes = (data, count) => {\r\n\r\n    const grouped = data.reduce((acc, booking) => {\r\n        const dateKey = booking.d;\r\n\r\n        if (!acc[dateKey]) {\r\n            acc[dateKey] = {\r\n                ...booking,\r\n                workTime: [...booking.workTime],\r\n                nonWorkTime: [...booking.nonWorkTime],\r\n                allSlots: booking.allSlots || 0,\r\n            };\r\n        } else {\r\n\r\n            acc[dateKey].workTime = [...acc[dateKey].workTime, ...booking.workTime];\r\n            acc[dateKey].nonWorkTime = [...new Set([...acc[dateKey].nonWorkTime, ...booking.nonWorkTime])]; // Unique nonWorkTime\r\n            acc[dateKey].allSlots += booking.allSlots || 0;\r\n        }\r\n        return acc;\r\n    }, {});\r\n    // Recalculate non-working intervals\r\n    return Object.values(grouped).map((booking) => {\r\n        const allWorkTimes = [];\r\n        const nonTimes = [];\r\n    \r\n        // Check if all work times have slots < 4\r\n        let allSlotsLessThanFour = booking.workTime.every(wt => wt.slots < count);\r\n    \r\n        // Flag to ensure `booking.d` is pushed only once\r\n        let bookingDAdded = false;\r\n    \r\n        booking.workTime.forEach((wt) => {\r\n            if (wt.slots >= count && wt.time) {\r\n                allWorkTimes.push(wt.time);\r\n            } else if (booking.allSlots <= 0 && wt.time) {\r\n                const currentDate = wt.time.split('T')[0] + 'T00:00:00.000Z';\r\n                allWorkTimes.push(currentDate);\r\n            } else if (allSlotsLessThanFour && !bookingDAdded) {\r\n                allWorkTimes.push(booking.d);\r\n                booking.allSlots = 0\r\n                bookingDAdded = true;\r\n            }\r\n        });\r\n        \r\n        const combinedWorkTime = calculateCombinedWorkTime(allWorkTimes);\r\n        const nonWorkTime = calculateNonWorkTime(booking.nonWorkTime, combinedWorkTime);\r\n        \r\n        return {\r\n            ...booking,\r\n            workTime: combinedWorkTime,\r\n            nonWorkTime,\r\n            allSlots: booking.allSlots,\r\n        };\r\n    });\r\n    \r\n};\r\n\r\nexport { calculateCombinedWorkTime, calculateNonWorkTime, mergeWorkAndNonWorkTimes }","import '@mobiscroll/react/dist/css/mobiscroll.min.css';\r\nimport { Datepicker, Page, setOptions, localeUa } from '@mobiscroll/react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { mergeWorkAndNonWorkTimes } from '../../common/utils/smallFn/calculateTimes';\r\nimport { parseUkrainianDate } from '../../common/utils/smallFn/convertDate';\r\nimport LogoImg from '../../services/images/Group12.svg'\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport './date.css'\r\n\r\nsetOptions({\r\n  locale: localeUa,\r\n  theme: 'ios',\r\n  themeVariant: 'light'\r\n});\r\n\r\nfunction Calendar2({ HandleFinish, final, teacherId, teacherName, schoolId }) {\r\n  const [dates, setDates] = useState([]);\r\n  const [multiple, setMultiple] = useState([]);\r\n  const min = '2024-11-01T00:00';\r\n  const max = '2024-12-15T00:00';\r\n  const [datetimeLabels, setDatetimeLabels] = useState([]);\r\n  const [datetimeInvalid, setDatetimeInvalid] = useState([]);\r\n  const [date, setDate] = useState([]);\r\n  const [freeSlot, setFreeSlot] = useState([])\r\n\r\n  const location = useLocation();\r\n  const { teacherDate } = location.state || {};\r\n  const { level } = location.state || {};\r\n  const { allTeachers } = location.state || {};\r\n  const { lessonTypes } = location.state || {};\r\n  const { count } = location.state || {};\r\n  const { price } = location.state || {};\r\n  const { logo } = location.state || {};\r\n  const { name } = location.state || {};\r\n\r\n\r\n  console.log(count, lessonTypes, allTeachers, level, price)\r\n\r\n  const handlePageLoadingDatetime = useCallback(() => {\r\n    const invalid = [];\r\n    const labels = [];\r\n\r\n    // Создаем список всех возможных дат в диапазоне\r\n    const allPossibleDates = [];\r\n    const minDate = new Date(min);\r\n    const maxDate = new Date(max);\r\n\r\n    for (let d = minDate; d <= maxDate; d.setDate(d.getDate() + 1)) {\r\n      allPossibleDates.push(new Date(d));\r\n    }\r\n\r\n    // Сохраняем все рабочие и нерабочие даты как доступные и недоступные\r\n    date.forEach(booking => {\r\n      const d = new Date(booking.d);\r\n\r\n      const localDate = new Date(d.getTime() + d.getTimezoneOffset() * 60000);\r\n      console.log(localDate)\r\n      if (booking.allSlots > 0) {\r\n        labels.push({\r\n          start: localDate,\r\n          title: booking.allSlots + ' SPOTS',\r\n          textColor: '#e1528f',\r\n        });\r\n        invalid.push(...booking.nonWorkTime);\r\n      } else {\r\n        invalid.push(localDate);\r\n      }\r\n    });\r\n    console.log(date)\r\n    // Добавляем недоступные даты, которых нет в date\r\n    allPossibleDates.forEach(possibleDate => {\r\n      const isDateAvailable = date.some(booking => {\r\n        const bookingDate = new Date(booking.d);\r\n        return bookingDate.toDateString() === possibleDate.toDateString();\r\n      });\r\n\r\n      if (!isDateAvailable) {\r\n        invalid.push(possibleDate);\r\n      }\r\n    });\r\n\r\n    setDatetimeLabels(labels);\r\n    setDatetimeInvalid(invalid);\r\n  }, [date]);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (teacherDate) {\r\n          const teacherDates = teacherDate[0].level.filter(lv => lv.levelName === level)[0].lessonTypes.filter(ls => ls.typeName === lessonTypes);\r\n\r\n          teacherDates[0].date.forEach((booking) => {\r\n            booking.allSlots = booking.workTime.reduce((total, item) => total + item.slots, 0);\r\n          });\r\n          const workTimes = teacherDates[0].date.flatMap(time => time.workTime);\r\n          console.log(workTimes)\r\n          setFreeSlot(workTimes)\r\n\r\n          setDate(mergeWorkAndNonWorkTimes(teacherDates[0].date, count));\r\n\r\n\r\n        } else if (allTeachers) {\r\n\r\n          allTeachers.forEach((booking) => {\r\n            booking.allSlots = booking.workTime.reduce((total, item) => total + item.slots, 0);\r\n          });\r\n          const workTimes = allTeachers.flatMap(time => time.workTime);\r\n          const mergedTeachers = mergeWorkAndNonWorkTimes(allTeachers, count);\r\n          setDate(mergedTeachers);\r\n          setFreeSlot(workTimes)\r\n          \r\n        }\r\n\r\n        const storedDates = localStorage.getItem('selectedDates');\r\n        if (storedDates) {\r\n          setMultiple(JSON.parse(storedDates));\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to fetch bookings', err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  useEffect(() => {\r\n    handlePageLoadingDatetime();\r\n  }, [date, handlePageLoadingDatetime]); // Update datetime labels and invalid dates when date changes\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('selectedDates', JSON.stringify(dates));\r\n  }, [dates]);\r\n\r\n  const handleSaveDates = () => {\r\n    if (Array.isArray(multiple)) {\r\n      setDates((prevDates) => {\r\n        const newDates = multiple.map(formatDateTime);\r\n        const uniqueDates = [...new Set([...prevDates, ...newDates])]; // Убираем дубликаты\r\n        return uniqueDates;\r\n      });\r\n    } else {\r\n      console.error(\"Expected 'multiple' to be an array, but got:\", typeof multiple);\r\n    }\r\n  };\r\n\r\n\r\n  const handleChangeMultiple = useCallback((args) => {\r\n    let newValue = args.value;\r\n\r\n    if (newValue === null) {\r\n      setMultiple([]);\r\n    } else if (newValue instanceof Date) {\r\n      setMultiple([newValue]);\r\n    } else if (Array.isArray(newValue)) {\r\n      setMultiple(newValue);\r\n    } else {\r\n      console.error(\"Unexpected type for 'args.value':\", newValue);\r\n      setMultiple([]);\r\n    }\r\n  }, []);\r\n\r\n  const handleRemoveDate = (dateToRemove) => {\r\n    setDates((prevDates) => prevDates.filter(date => date !== dateToRemove));\r\n  };\r\n\r\n  const formatDateTime = (dateString) => {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n    return new Date(dateString).toLocaleString('uk-UA', options);\r\n  };\r\n\r\n  return (\r\n    <Page className=\"md-calendar-booking\">\r\n\r\n      <div className=\"mbsc-form-group\">\r\n\r\n        <div className=\"mbsc-form-group-title\">Select date & time</div>\r\n        <Datepicker\r\n          display=\"inline\"\r\n          controls={['calendar', 'timegrid']}\r\n          min={min}\r\n          max={max}\r\n          minTime=\"05:00\"\r\n          maxTime=\"23:59\"\r\n          stepMinute={5}\r\n          width={null}\r\n          labels={datetimeLabels}\r\n          invalid={datetimeInvalid}\r\n          onPageLoading={handlePageLoadingDatetime}\r\n          cssClass=\"booking-datetime\"\r\n          onChange={handleChangeMultiple}\r\n          multiple={true}\r\n        />\r\n        <button onClick={handleSaveDates}>Обрати</button>\r\n      </div>\r\n      <div className=\"selected-dates\">\r\n        <h3>Обрані записи:</h3>\r\n        {Array.isArray(dates) && dates.length > 0 ? (\r\n          <ul>\r\n            {dates.map((date, index) => {\r\n\r\n              const matchedItems = freeSlot.filter(item =>\r\n                new Date(new Date(item.time).getTime() + new Date(item.time).getTimezoneOffset() * 60000).getTime() === new Date(new Date(parseUkrainianDate(date))).getTime() && item.slots > 0\r\n              );\r\n\r\n              const matchedItemsc = freeSlot.filter(item =>\r\n                console.log(new Date(new Date(item.time).getTime() + new Date(item.time).getTimezoneOffset() * 60000), new Date(new Date(parseUkrainianDate(date)))),\r\n                // console.log(),\r\n                console.log(parseUkrainianDate(date))\r\n              );\r\n\r\n              console.log(matchedItemsc)\r\n\r\n              const totalSlots = matchedItems.reduce((sum, item) => sum + item.slots, 0); return (\r\n                <li key={index}>\r\n                  {date} {totalSlots && `(Вільних місць: ${totalSlots})`}\r\n                  {console.log(totalSlots)}\r\n                  <button className='delete-btn' onClick={() => handleRemoveDate(date)}>\r\n                    ✖\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n\r\n          </ul>\r\n        ) : (\r\n          <p>Немає обраних дат</p>\r\n        )}\r\n        <div className='next-btn'>\r\n          <Link to={HandleFinish()} state={{\r\n            lang_from_general_cal: final,\r\n            level: level,\r\n            teacherId: teacherId,\r\n            teacherName: teacherName,\r\n            lessonTypes: lessonTypes,\r\n            schoolId: schoolId,\r\n            count: count,\r\n            price: price,\r\n            logo: logo,\r\n            name: name\r\n\r\n          }}>\r\n            <button disabled={dates.length === 0}>Далі</button>\r\n          </Link>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </Page>\r\n\r\n  );\r\n}\r\n\r\nexport default Calendar2;\r\n","import { useLocation } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Calendar2 from \"./testCalendarWithDatePickerDefault\";\r\nimport Footer from \"../../common/components/Footer/Footer\";\r\n\r\nconst Date = () => {\r\n\r\n  const [final, setFinal] = useState(null)\r\n\r\n  const location = useLocation();\r\n  const { teacherDate } = location.state || {};\r\n  const { level } = location.state || {};\r\n  const { allTeachers } = location.state || {};\r\n  const { lang } = location.state || {};\r\n  const { teacherId } = location.state || {};\r\n  const { teacherName } = location.state || {};\r\n  const { lessonTypes } = location.state || {};\r\n  const { schoolId } = location.state || {};\r\n  const { count } = location.state || {};\r\n\r\n  const HandleFinish = () => {\r\n    if (allTeachers) {\r\n      return `/teacher`;\r\n    } else if (teacherDate) {\r\n      return `/final`;\r\n    }\r\n\r\n  };\r\n \r\n\r\n  useEffect(() => {\r\n    const keys = Object.keys(localStorage);\r\n    localStorage.setItem('OrderId', [])\r\n    keys.forEach(key => {\r\n      if (key.startsWith('availableTimes_')) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    });\r\n    localStorage.setItem('selectedSlots', [])\r\n    if (teacherDate) {\r\n      setFinal(teacherDate[0].lang)\r\n    }\r\n    else if (allTeachers) {\r\n      localStorage.removeItem('selectedDates');\r\n      setFinal(lang)\r\n      console.log(lang)\r\n    }\r\n\r\n  }, [])\r\n  return (\r\n    <div className=\"calendar\">\r\n      <Calendar2 HandleFinish={HandleFinish} final={final} teacherId={teacherId} teacherName={teacherName} schoolId={schoolId} />\r\n      <div className=\"calendar-footer\">\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Date;\r\n"],"names":["parseUkrainianDate","dateStr","cleanedDateStr","replace","trim","console","log","day","monthUkr","year","time","time2","time3","split","monthEng","Date","toUTCString","formatDateToUkrainian","date","getUTCDate","getUTCMonth","getUTCFullYear","String","getUTCHours","padStart","getUTCMinutes","mergeWorkAndNonWorkTimes","data","count","grouped","reduce","acc","booking","dateKey","d","workTime","nonWorkTime","Set","allSlots","Object","values","map","allWorkTimes","allSlotsLessThanFour","every","wt","slots","bookingDAdded","forEach","push","currentDate","combinedWorkTime","workTimes","sortedTimes","getTime","sort","a","b","combined","currentInterval","Math","max","_ref","start","calculateCombinedWorkTime","calculateNonWorkTime","error","adjustedTime","filter","length","nonWorkTimes","startOfDay","setHours","firstWorkTime","end","i","currentStart","nextStart","previousEnd","lastWorkTime","endOfDay","mergedNonWorkTime","uniqueNonWorkTime","Array","from","nwt","str","setOptions","locale","localeUa","theme","themeVariant","HandleFinish","final","teacherId","teacherName","schoolId","dates","setDates","useState","multiple","setMultiple","min","datetimeLabels","setDatetimeLabels","datetimeInvalid","setDatetimeInvalid","setDate","freeSlot","setFreeSlot","location","useLocation","teacherDate","state","level","allTeachers","lessonTypes","price","logo","name","handlePageLoadingDatetime","useCallback","invalid","labels","allPossibleDates","minDate","maxDate","getDate","localDate","getTimezoneOffset","title","textColor","possibleDate","some","toDateString","useEffect","async","teacherDates","lv","levelName","ls","typeName","total","item","flatMap","mergedTeachers","storedDates","localStorage","getItem","JSON","parse","err","fetchData","setItem","stringify","handleChangeMultiple","args","newValue","value","isArray","formatDateTime","dateString","toLocaleString","month","hour","minute","_jsxs","Page","className","children","_jsx","Datepicker","display","controls","minTime","maxTime","stepMinute","width","onPageLoading","cssClass","onChange","onClick","handleSaveDates","prevDates","newDates","index","matchedItems","matchedItemsc","totalSlots","sum","handleRemoveDate","dateToRemove","Link","to","lang_from_general_cal","disabled","setFinal","lang","keys","key","startsWith","removeItem","Calendar2","Footer"],"sourceRoot":""}