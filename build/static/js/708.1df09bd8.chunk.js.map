{"version":3,"file":"static/js/708.1df09bd8.chunk.js","mappings":"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","sources":["common/utils/smallFn/convertDate.js","common/utils/smallFn/getTeacherAvaliableTimes.js","common/utils/smallFn/selectTeacherDataFromGeneralCalendar.js","common/utils/smallFn/fetchSchoolData.js","pages/chooseTeacher/teachers.jsx"],"sourcesContent":["import { format } from 'date-fns';\r\nimport { toZonedTime  } from 'date-fns-tz';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nfunction translateUkrainianMonthToEnglish(month) {\r\n    const months = {\r\n        \"січня\": \"January\",\r\n        \"лютого\": \"February\",\r\n        \"березня\": \"March\",\r\n        \"квітня\": \"April\",\r\n        \"травня\": \"May\",\r\n        \"червня\": \"June\",\r\n        \"липня\": \"July\",\r\n        \"серпня\": \"August\",\r\n        \"вересня\": \"September\",\r\n        \"жвтня\": \"October\",\r\n        \"листпада\": \"November\",\r\n        \"грудня\": \"December\"\r\n    };\r\n\r\n    return months[month];\r\n}\r\n\r\nfunction parseUkrainianDate(dateStr) {\r\n    \r\n    const cleanedDateStr = dateStr.replace('р.', '').replace('о', '').trim();\r\n    console.log(cleanedDateStr)\r\n    const [day, monthUkr, year, time, time2, time3] = cleanedDateStr.split(' ');\r\n   \r\n    const monthEng = translateUkrainianMonthToEnglish(monthUkr);\r\n\r\n    // const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}.000+00:00`;\r\n    const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}`;\r\n\r\n    return new Date(formattedDateStr).toUTCString();\r\n}\r\n\r\n\r\n\r\nconst formatDateToUkrainian = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const day = date.getUTCDate();\r\n    const monthNames = ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня'];\r\n    const month = monthNames[date.getUTCMonth()];\r\n    const year = date.getUTCFullYear();\r\n    const hours = String(date.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\r\n  \r\n    return `${day} ${month} ${year} р. о ${hours}:${minutes}`;\r\n  };\r\n\r\nexport {parseUkrainianDate, formatDateToUkrainian};","const getTeacherAvailableTimes = (teacher, selectedTimes, lang_from_general_cal, level, parseUkrainianDate, lessonTypes) => {\r\n  // Попытка загрузить данные из localStorage\r\n  const savedAvailableTimes = localStorage.getItem(`availableTimes_${teacher.data.teacherId}`);\r\n  if (savedAvailableTimes) {\r\n    try {\r\n      const parsedAvailableTimes = JSON.parse(savedAvailableTimes);\r\n      return parsedAvailableTimes.map(timeSlot => timeSlot.time);\r\n    } catch (e) {\r\n      console.error('Invalid JSON string for availableTimes', e);\r\n    }\r\n  }\r\n\r\n  // Если в localStorage данных нет, выполняем стандартный расчет\r\n  let parsedSelectedTimes = [];\r\n  if (typeof selectedTimes === 'string') {\r\n    try {\r\n      parsedSelectedTimes = JSON.parse(selectedTimes);\r\n      // Дополнительная проверка, чтобы убедиться, что parsedSelectedTimes является массивом\r\n      if (!Array.isArray(parsedSelectedTimes)) {\r\n        console.error('parsedSelectedTimes is not an array:', parsedSelectedTimes);\r\n        parsedSelectedTimes = []; // Обнуляем, чтобы избежать ошибок в дальнейшем\r\n      }\r\n    } catch (e) {\r\n      console.error('Invalid JSON string for selectedTimes', e);\r\n    }\r\n  } else if (Array.isArray(selectedTimes)) {\r\n    parsedSelectedTimes = selectedTimes; // Если selectedTimes уже массив\r\n  }\r\n  // .filter(lv => lv.lessonTypes == lessonTypes)\r\n  const availableTimes = teacher.data.lang\r\n    .filter(langObj => langObj.lang === lang_from_general_cal)\r\n    .flatMap(langObj => langObj.level)\r\n    .filter(lv => lv.levelName === level)\r\n    .flatMap(lv =>lv.lessonTypes.filter(lv => lv.typeName == lessonTypes))\r\n    .flatMap(lv => lv.date)\r\n    .flatMap(dateObj => dateObj.workTime)\r\n    .filter(workTimeSlot =>\r\n      parsedSelectedTimes.some(selectedDate =>\r\n        new Date(new Date(workTimeSlot.time).getTime() + new Date(workTimeSlot.time).getTimezoneOffset() * 60000).getTime() === new Date(new Date(parseUkrainianDate(selectedDate))).getTime() && workTimeSlot.slots > 0      )\r\n    );\r\n  console.log(availableTimes)\r\n  localStorage.setItem(`availableTimes_${teacher.data.teacherId}`, JSON.stringify(availableTimes));\r\n\r\n  return availableTimes.map(timeSlot => timeSlot.time);\r\n};\r\n\r\nexport default getTeacherAvailableTimes;\r\n","const selectTeacherAndDates = (teacher, lang, level, lessonTypes, time, setSelectTimes, selectTimes) => {\r\n    const selected = `${teacher.data.teacherName}, ${teacher.data.teacherId}, ${lang}, ${level}, ${lessonTypes}, ${time}`;\r\n    const isSelected = selectTimes.includes(selected);\r\n\r\n    if (isSelected) {\r\n        // Удаляем время, если оно уже выбрано\r\n        const updatedTimes = selectTimes.filter(item => item !== selected);\r\n        setSelectTimes(updatedTimes);\r\n        localStorage.setItem('selectedSlots', JSON.stringify(updatedTimes));\r\n    } else {\r\n\r\n        const updatedTimes = [...selectTimes, selected];\r\n        setSelectTimes(updatedTimes);\r\n        localStorage.setItem('selectedSlots', JSON.stringify(updatedTimes));\r\n    }\r\n};\r\nexport default selectTeacherAndDates","import axios from \"axios\";\r\nimport { parseUkrainianDate } from \"./convertDate\";\r\n\r\nconst fetchSchoolData = async (schoolId, level, selectedTimes, language, lang_from_general_cal, lessonTypes, setLang, setAllTeachers, setSchoolData, setError, setLoading) => {\r\n    try {\r\n      const response = await axios.get(`http://13.60.221.226/api/schools/${schoolId}`);\r\n      let teachers = response.data[0].ESL.teacher;\r\n\r\n      if (level) {\r\n        let parsedSelectedTimes = [];\r\n        if (typeof selectedTimes === 'string' && selectedTimes.length > 0) {\r\n          try {\r\n            // Parse selectedTimes from localStorage\r\n            parsedSelectedTimes = JSON.parse(selectedTimes);\r\n          } catch (e) {\r\n            console.error('Invalid JSON string for selectedTimes:', e);\r\n          }\r\n        }\r\n        // Ensure parsedSelectedTimes is always an array\r\n        if (!Array.isArray(parsedSelectedTimes)) {\r\n          parsedSelectedTimes = [];\r\n        }\r\n        teachers = teachers.filter(teacher =>\r\n          teacher.data &&\r\n          teacher.data.lang.some(langObj =>\r\n            langObj.level &&\r\n            langObj.level.some(l =>\r\n              l.levelName === level &&\r\n              (langObj.lang === language || langObj.lang === lang_from_general_cal) &&\r\n              l.lessonTypes.some(lessonTypeObj =>\r\n                lessonTypeObj.typeName === lessonTypes &&\r\n                (parsedSelectedTimes.length === 0 ||\r\n                  parsedSelectedTimes.some(selectedDate =>\r\n                    lessonTypeObj.date.some(dateObj =>\r\n                      dateObj.workTime.some(workTimeSlot =>\r\n                        new Date(new Date(workTimeSlot.time).getTime() + new Date(workTimeSlot.time).getTimezoneOffset() * 60000).getTime() === new Date(new Date(parseUkrainianDate(selectedDate))).getTime() && workTimeSlot.slots > 0                      )\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        );\r\n      }\r\n      console.log(teachers)\r\n      const languages = teachers.flatMap(teacher =>\r\n        teacher.data.lang.flatMap(langObj =>\r\n          langObj.lang\r\n        )\r\n      );\r\n\r\n      const allTeacherDates = teachers.flatMap(teacher =>\r\n        teacher.data.lang\r\n          .filter(langObj => langObj.lang === language)\r\n          .flatMap(langObj =>\r\n            langObj.level\r\n              .filter(lv => lv.levelName === level)\r\n              .flatMap(lv => lv.lessonTypes.filter(lv => lv.typeName == lessonTypes)\r\n                .flatMap(lv => lv.date)\r\n              )\r\n\r\n          )\r\n      );\r\n\r\n      if (language) {\r\n        setLang(languages);\r\n      } else if (lang_from_general_cal) {\r\n        setLang(lang_from_general_cal);\r\n      }\r\n\r\n      setAllTeachers(allTeacherDates);\r\n      setSchoolData(teachers);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  export default fetchSchoolData","import { useLocation } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LogoImg from '../../services/images/Group12.svg'\r\nimport { parseUkrainianDate, formatDateToUkrainian } from '../../common/utils/smallFn/convertDate'\r\nimport getTeacherAvailableTimes from \"../../common/utils/smallFn/getTeacherAvaliableTimes\";\r\nimport selectTeacherAndDates from \"../../common/utils/smallFn/selectTeacherDataFromGeneralCalendar\";\r\n\r\nimport Footer from \"../../common/components/Footer/Footer\";\r\nimport fetchSchoolData from \"../../common/utils/smallFn/fetchSchoolData\";\r\n\r\nimport '../chooseLanguage/language.css';\r\nimport './teachers.css'\r\n\r\nconst Teachers = () => {\r\n  const [schoolData, setSchoolData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [allTeachers, setAllTeachers] = useState([]);\r\n  const [lang, setLang] = useState();\r\n  const [selectTimes, setSelectTimes] = useState([])\r\n  const [counts, setCount] = useState(1)\r\n\r\n  const location = useLocation();\r\n  const { level } = location.state || {};\r\n  const { language } = location.state || {};\r\n  const { lessonTypes } = location.state || {};\r\n  const { lang_from_general_cal } = location.state || {};\r\n  const { schoolId } = location.state || {};\r\n  const { count } = location.state || {};\r\n  const { price } = location.state || {};\r\n  const { logo } = location.state || {};\r\n  const { name } = location.state || {};\r\n\r\n  console.log(price)\r\n  console.log(lang_from_general_cal, level, lessonTypes, schoolId, count)\r\n\r\n  const selectedTimes = localStorage.getItem('selectedDates');\r\n  console.log(schoolId)\r\n  const HandleFinish = () => {\r\n    if (language) {\r\n      return `/date`;\r\n    } else {\r\n      return `/final`;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const keys = Object.keys(localStorage);\r\n    localStorage.setItem('OrderId', [])\r\n    // keys.forEach(key => {\r\n    //   if (key.startsWith('availableTimes_')) {\r\n    //     localStorage.removeItem(key);\r\n    //   }\r\n    // });\r\n    fetchSchoolData(schoolId, level, selectedTimes, language, lang_from_general_cal, lessonTypes, setLang, setAllTeachers, setSchoolData, setError, setLoading);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"main\">\r\n      <div className=\"container\">\r\n        <div className='logo'>\r\n          <div className='logo-items'>\r\n            <Link to={`/${schoolId}`}><img src={logo} alt=\"Logo\" /></Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"container-items-block teach\">\r\n          <h1 className=\"teacher-title\">Оберіть вчителя</h1>\r\n  \r\n          {schoolData && (\r\n            <>\r\n              <div className=\"teachers-data\">\r\n                {schoolData.length > 0 ? (\r\n                  schoolData.map((teacher, index) => (\r\n                    <div className=\"teacher\" key={index}>\r\n                      <div className=\"teacherData\">\r\n                        <div className=\"teacherImg\">\r\n                          <img src={teacher.data.teacherImg} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"name-and-btn\">\r\n                          <div className=\"teacher-link\">\r\n                            <p>{teacher.data.teacherName}</p>\r\n                          </div>\r\n                          {getTeacherAvailableTimes(teacher, selectedTimes, lang_from_general_cal, level, parseUkrainianDate, lessonTypes).length <= 0 ? (\r\n                            <Link to={HandleFinish()} state={{\r\n                              teacherDate: teacher.data.lang.filter(lang => lang.lang === language),\r\n                              level: level,\r\n                              lang_from_general_cal: lang,\r\n                              teacherId: teacher.data.teacherId,\r\n                              teacherName: teacher.data.teacherName,\r\n                              lessonTypes: lessonTypes,\r\n                              schoolId: schoolId,\r\n                              count: count ? count : counts,\r\n                              price: price,\r\n                              logo: logo,\r\n                              name: name\r\n                            }} className=\"select-btn\">\r\n                              <div>\r\n                                <p>Обрати</p>\r\n                              </div>\r\n                            </Link>\r\n                          ) : (\r\n                            <div className=\"select-btn\">\r\n                              <div className=\"teacher-times\">\r\n                                {getTeacherAvailableTimes(teacher, selectedTimes, lang_from_general_cal, level, parseUkrainianDate).length > 0 ? (\r\n                                  <ul className=\"teachers-times\">\r\n                                    {getTeacherAvailableTimes(teacher, selectedTimes, lang_from_general_cal, level, parseUkrainianDate).map((time, idx) => (\r\n                                      <li\r\n                                        key={idx}\r\n                                        onClick={() => selectTeacherAndDates(\r\n                                          teacher,\r\n                                          lang,\r\n                                          level,\r\n                                          lessonTypes,\r\n                                          time,\r\n                                          setSelectTimes,\r\n                                          selectTimes\r\n                                        )}\r\n                                        style={{\r\n                                          cursor: 'pointer',\r\n                                          backgroundColor: selectTimes.includes(`${teacher.data.teacherName}, ${teacher.data.teacherId}, ${lang}, ${level}, ${lessonTypes}, ${time}`) ? '#4D7D6DB2' : '#D9D9D980',\r\n                                          color: selectTimes.includes(`${teacher.data.teacherName}, ${teacher.data.teacherId}, ${lang}, ${level}, ${lessonTypes}, ${time}`) ? 'white' : '#205C48'\r\n                                        }}\r\n                                      >\r\n                                        {formatDateToUkrainian(time)}\r\n                                      </li>\r\n                                    ))}\r\n                                  </ul>\r\n                                ) : null}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <hr />\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div>\r\n                    <p>Немає доступних вчителів</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n  \r\n              {schoolData.some(teacher =>\r\n                getTeacherAvailableTimes(teacher, selectedTimes, lang_from_general_cal, level, parseUkrainianDate).length > 0\r\n              ) && (\r\n                <Link to={HandleFinish()} state={{\r\n                  teacherDate: schoolData[0].data.lang.filter(lang => lang.lang === language),\r\n                  level: level,\r\n                  lang_from_general_cal: lang,\r\n                  teacherId: schoolData[0].data.teacherId,\r\n                  lessonTypes: lessonTypes,\r\n                  schoolId: schoolId,\r\n                  count: count ? count : counts,\r\n                  price: price,\r\n                  logo: logo,\r\n                  name: name\r\n                }} className=\"select-btn\">\r\n                  <button disabled={selectTimes.length === 0}>Далі</button>\r\n                </Link>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <Footer />\r\n  </>\r\n  \r\n  );\r\n};\r\n\r\nexport default Teachers;\r\n"],"names":["parseUkrainianDate","dateStr","cleanedDateStr","replace","trim","console","log","day","monthUkr","year","time","time2","time3","split","monthEng","Date","toUTCString","formatDateToUkrainian","date","getUTCDate","getUTCMonth","getUTCFullYear","String","getUTCHours","padStart","getUTCMinutes","getTeacherAvailableTimes","teacher","selectedTimes","lang_from_general_cal","level","lessonTypes","savedAvailableTimes","localStorage","getItem","data","teacherId","JSON","parse","map","timeSlot","e","error","parsedSelectedTimes","Array","isArray","availableTimes","lang","filter","langObj","flatMap","lv","levelName","typeName","dateObj","workTime","workTimeSlot","some","selectedDate","getTime","getTimezoneOffset","slots","setItem","stringify","selectTeacherAndDates","setSelectTimes","selectTimes","selected","teacherName","includes","updatedTimes","item","async","schoolId","language","setLang","setAllTeachers","setSchoolData","setError","setLoading","teachers","axios","get","ESL","length","l","lessonTypeObj","languages","allTeacherDates","message","Teachers","schoolData","useState","loading","allTeachers","counts","setCount","location","useLocation","state","count","price","logo","name","HandleFinish","useEffect","Object","keys","fetchSchoolData","_jsx","className","children","_jsxs","_Fragment","Link","to","src","alt","index","teacherImg","teacherDate","idx","onClick","style","cursor","backgroundColor","color","disabled","Footer"],"sourceRoot":""}